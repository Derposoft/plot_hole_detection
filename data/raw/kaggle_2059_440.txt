
In the testing suite, we wrote a list of errors, and exceptions would return a number referring to the error in the code. It was just for development purposes. Next to one of the exceptions we declared, I saw a signed integer. Negative six. Everyone on the team was so excited to be making something so novel, groundbreaking. A machine that targets just the tumors with a laser beam of radiation. No chemo, no months and years of pain, just one shot to kill the tumor. It was so fulfilling to be making something that would truly save lives. Not some new operating system or audio encoder. This was something that really mattered. Here I was, making it work, as efficiently as I could. The functions in the code told me their secrets that others had to test and calculate on their own. Search function runtimes and sorting algorithm efficiency was transparent to me. This was my gift. It allowed me to move quickly, confident that infinite loops and deadlocks were never possible (the numbers I see would climb to near infinite until I corrected these scenarios.) No module ever ran longer than it needed to. "Has anyone written any documentation?" Mable asked. "How could we? It would never keep up with what's getting written in the software." was the reply. It was true. No one bothered writing in plain speech how our machine worked, because it kept changing and getting rewritten every day as we sought to perfect every aspect of its functionality. But there was that number. A cost. A negative cost. But what could an error code possible cost? And such a small number. Couldn't be CPU cycles or memory address spaces. I pored over the code and found nothing. The error was related to a race condition, that's all. A keyboard interrupt when one was impossible, but we put the error in anyway. It was just a testing suite. I knew the program was perfect. I knew better than anyone. Afterword Between 1985 and 1987, there were six documented cases of extreme radiation poisoning in cancer patients treated by the Therac-25, a laser radiation machine controlled by a computer. Investigations uncovered that, when the operator entered the specifications too quickly, the laser would successfully fire, but the computer would return an ambiguous error code. The operators usually thought it had failed and would fire it again. Other times the laser would fire at hundred times greater power than normal. These incidents have been described as one of the worst cases of gross negligence in software design to this day. Edit: Holy moly thanks for the gold!! 